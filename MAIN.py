# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nVm3oBGaAAVC2jMhGQ762C8DDD7qYRvO
"""

import streamlit as st
import matplotlib.pyplot as plt

class PageReplacement:
    def __init__(self, frame_size, reference_string):
        self.frame_size = frame_size
        self.reference_string = reference_string
        self.page_faults = 0

    def fifo(self):
        frame = []
        page_faults = 0
        for page in self.reference_string:
            if page not in frame:
                if len(frame) < self.frame_size:
                    frame.append(page)
                else:
                    frame.pop(0)
                    frame.append(page)
                page_faults += 1
        return page_faults

    def lru(self):
        frame = []
        page_faults = 0
        for page in self.reference_string:
            if page not in frame:
                if len(frame) < self.frame_size:
                    frame.append(page)
                else:
                    frame.pop(0)
                    frame.append(page)
                page_faults += 1
            else:
                frame.remove(page)
                frame.append(page)  # Move to most recently used
        return page_faults

    def optimal(self):
        frame = []
        page_faults = 0
        for i, page in enumerate(self.reference_string):
            if page not in frame:
                if len(frame) < self.frame_size:
                    frame.append(page)
                else:
                    future_use = {p: self.reference_string[i+1:].index(p) if p in self.reference_string[i+1:] else float('inf') for p in frame}
                    victim = max(future_use, key=future_use.get)
                    frame.remove(victim)
                    frame.append(page)
                page_faults += 1
        return page_faults

def compare_algorithms(reference_string, frame_size):
    sim = PageReplacement(frame_size, reference_string)
    results = {
        "FIFO": sim.fifo(),
        "LRU": sim.lru(),
        "Optimal": sim.optimal()
    }
    return results

st.title("Page Replacement Algorithm Simulator")

reference_string = st.text_input("Enter Reference String (space-separated numbers):")
frame_size = st.number_input("Enter Frame Size:", min_value=1, step=1, value=3)
algorithm = st.selectbox("Select Algorithm:", ["FIFO", "LRU", "Optimal", "Compare All"])

if st.button("Run Simulation"):
    try:
        ref_list = list(map(int, reference_string.split()))
        if algorithm == "Compare All":
            results = compare_algorithms(ref_list, frame_size)
            st.write("### Page Faults for Each Algorithm:")
            for algo, faults in results.items():
                st.write(f"{algo}: {faults}")

            fig, ax = plt.subplots()
            ax.bar(results.keys(), results.values(), color=['blue', 'green', 'red'])
            ax.set_xlabel("Algorithm")
            ax.set_ylabel("Page Faults")
            ax.set_title("Page Replacement Algorithm Comparison")
            st.pyplot(fig)
        else:
            sim = PageReplacement(frame_size, ref_list)
            if algorithm == "FIFO":
                result = sim.fifo()
            elif algorithm == "LRU":
                result = sim.lru()
            else:
                result = sim.optimal()
            st.success(f"Page Faults using {algorithm}: {result}")
    except ValueError:
        st.error("Invalid input. Please enter space-separated integers for the reference string.")